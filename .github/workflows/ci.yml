name: CI

on:
  # Enable option to manually run the action:
  workflow_dispatch:

  # Run on the `main` branch or on PRs that target it:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  # Run the pipeline for each PR part of merge queues as well
  merge_group:

jobs:
  lint:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v16
        if: ${{ runner.environment == 'github-hosted' }}
        with:
          extra-conf: accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Check formatting
        run: nix develop --impure .#pre-commit -c pre-commit run --all-files

      - name: nix flake check
        run: nix flake check --impure

  smart-contracts-tests:
    timeout-minutes: 360
    runs-on: [self-hosted, nixos, x86-64-v3]

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v16
        if: ${{ runner.environment == 'github-hosted' }}
        with:
          extra-conf: accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build & activate the Nix Dev Shell
        run: |
          eval "$(nix print-dev-env --accept-flake-config --impure .#devShells.x86_64-linux.js || echo exit 1)"
          env >> "$GITHUB_ENV"

      - name: Install JS deps
        run: yarn install

      - name: Build all contracts
        run: yarn build:recursive @blocksense/contracts

      - name: Test all contracts
        run: yarn workspace @blocksense/contracts test

      - name: Measure test coverage
        run: yarn workspace @blocksense/contracts coverage

      - name: Measure contract size
        run: yarn workspace @blocksense/contracts size

  rust:
    timeout-minutes: 360
    strategy:
      matrix:
        include:
          - runner: [self-hosted, nixos, x86-64-v3]
            system: x86_64-linux
          - runner: macos-latest-xlarge
            system: aarch64-darwin
    runs-on: ${{ matrix.runner }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v16
        if: ${{ runner.environment == 'github-hosted' }}
        with:
          extra-conf: accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Install current Bash on macOS
        if: runner.os == 'macOS'
        run: brew install bash

      - name: Build & activate the Nix Dev Shell
        run: |
          eval "$(nix print-dev-env --accept-flake-config --impure .#devShells.${{ matrix.system }}.default || echo exit 1)"
          env >> "$GITHUB_ENV"

      - name: Build Rust workspace
        if: ${{ runner.environment == 'self-hosted' }}
        run: cargo build

      - name: Test Rust workspace
        if: ${{ runner.environment == 'self-hosted' }}
        run: cargo test

      - name: Run Cargo Clippy
        if: ${{ runner.environment == 'self-hosted' }}
        run: cargo clippy -- --deny warnings

  rust-nix-build:
    timeout-minutes: 360
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v16
        if: ${{ runner.environment == 'github-hosted' }}
        with:
          extra-conf: accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Nix build Rust workspace
        run: nix build --impure --json -L --accept-flake-config .#blocksense-rs

  deploy_websites:
    timeout-minutes: 360
    runs-on: [self-hosted, nixos, x86-64-v3]
    strategy:
      matrix:
        include:
          - project: docs.blocksense.network
          # - project: explorer.blocksense.network
    outputs:
      docsDeploymentMessage: ${{ steps.docs-ws-url.outputs.url }}
      # explorerDeploymentMessage: ${{ steps.explorer-ws-url.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v16
        if: ${{ runner.environment == 'github-hosted' }}
        with:
          extra-conf: accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build & activate the Nix Dev Shell
        run: |
          eval "$(nix print-dev-env --accept-flake-config --impure .#devShells.x86_64-linux.js || echo exit 1)"
          env >> "$GITHUB_ENV"

      - name: Install JS deps
        run: yarn install

      - name: Build
        run: yarn workspace @blocksense/docs.blocksense.network build:with-deps

      - name: Test `@blocksense/base-utils`
        run: yarn workspace @blocksense/base-utils test

      - name: Test
        run: yarn workspace @blocksense/docs.blocksense.network test

      - name: Deploy
        id: Deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy apps/docs.blocksense.network/dist --project-name=blocksense

      - name: Collect Docs Deployment URL
        id: docs-ws-url
        if: matrix.project == 'docs.blocksense.network'
        env:
          DOCS_DEPLOY_URL: ${{ steps.Deploy.outputs.deployment-url }}
        run: |
          echo "url=$DOCS_DEPLOY_URL" >> $GITHUB_STATE

  comment_on_pr:
    needs: [deploy_websites]
    runs-on: self-hosted
    permissions:
      pull-requests: write
    steps:
      - name: Get current date and time
        id: datetime
        run: |
          echo "latest_update=$(date +'%d.%m.%Y %H:%M:%S')" >> $GITHUB_STATE

      - name: Comment Deployment Links on the PR
        uses: marocchino/sticky-pull-request-comment@v2.9.1
        with:
          recreate: true
          message: |
            ### ðŸš€ Deployment Links of Blocksense Network websites:

            | Website | Latest Update | Commit |
            |---------------------|----------|----------------------------------------------------------------------|
            | ðŸŒ± [Documentation](${{ needs.deploy_websites.outputs.docsDeploymentMessage }}) | ${{ steps.datetime.outputs.latest_update }} | ${{ github.sha }} |
