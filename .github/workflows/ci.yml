name: CI

on:
  # Enable option to manually run the action:
  workflow_dispatch:

  # Run on the `main` branch or on PRs that target it:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  # Run the pipeline for each PR part of merge queues as well
  merge_group:

jobs:
  lint:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v13
        if: ${{ runner.environment == 'github-hosted' }}
        with:
          extra-conf: accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build & activate the Nix Dev Shell
        run: |
          eval "$(nix print-dev-env --impure .#devShells.x86_64-linux.default)"
          env >> "$GITHUB_ENV"

      - name: Check formatting
        run: npm run format:check

      - name: nix flake check
        run: nix flake check --impure

  hardhat:
    timeout-minutes: 360
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v13
        if: ${{ runner.environment == 'github-hosted' }}
        with:
          extra-conf: accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build & activate the Nix Dev Shell
        run: |
          eval "$(nix print-dev-env --impure .#devShells.x86_64-linux.default)"
          env >> "$GITHUB_ENV"

      - name: Install JS deps
        run: yarn install

      - name: Build dependencies
        run: yarn workspace @blocksense/contracts build:deps

      - name: Build all contracts
        run: yarn workspace @blocksense/contracts build

      - name: Test all contracts
        run: yarn workspace @blocksense/contracts test

      - name: Measure test coverage
        run: yarn workspace @blocksense/contracts coverage

      - name: Measure contract size
        run: yarn workspace @blocksense/contracts size

  docs_website:
    timeout-minutes: 360
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v13
        if: ${{ runner.environment == 'github-hosted' }}
        with:
          extra-conf: accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build & activate the Nix Dev Shell
        run: |
          eval "$(nix print-dev-env --impure .#devShells.x86_64-linux.default)"
          env >> "$GITHUB_ENV"

      - name: Install JS deps
        run: yarn install

      - name: Build
        run: yarn workspace @blocksense/docs.blocksense.network build

      - name: Test `@blocksense/base-utils`
        run: yarn workspace @blocksense/base-utils test

      - name: Test
        run: yarn workspace @blocksense/docs.blocksense.network test

  rust:
    timeout-minutes: 360
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v13
        if: ${{ runner.environment == 'github-hosted' }}
        with:
          extra-conf: accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build & activate the Nix Dev Shell
        run: |
          eval "$(nix print-dev-env --impure .#devShells.x86_64-linux.default)"
          env >> "$GITHUB_ENV"

      - name: Build Rust workspace
        run: cargo build

      - name: Test Rust workspace
        run: cargo test

      - name: Run Cargo Clippy
        run: cargo clippy

      # - name: Build and install oracle trigger plugin
      #   run: ./libs/sdk/build-and-install-plugin.sh

  rust-nix-build:
    timeout-minutes: 360
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v13
        if: ${{ runner.environment == 'github-hosted' }}
        with:
          extra-conf: accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Nix build Rust workspace
        run: nix build --impure .#blocksense-rs

  docs_website_deploy:
    timeout-minutes: 360
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v13
        if: ${{ runner.environment == 'github-hosted' }}
        with:
          extra-conf: accept-flake-config = true

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build & activate the Nix Dev Shell
        run: |
          eval "$(nix print-dev-env --impure .#devShells.x86_64-linux.default)"
          env >> "$GITHUB_ENV"

      - name: Set node linker
        run: |
          echo "nodeLinker: node-modules" >> .yarnrc.yml

      - name: Install JS deps
        run: yarn install

      - name: Pull Vercel configuration
        run: yarn vercel link --scope blocksense --project docs.blocksense.network --yes --token ${{ secrets.vercel_token }}

      - name: Vercel Build - Prod
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: yarn vercel build --prod --yes --token ${{ secrets.vercel_token }}

      - name: Vercel Build - Preview
        if: github.ref != format('refs/heads/{0}', github.event.repository.default_branch)
        run: yarn vercel build --yes --token ${{ secrets.vercel_token }}

      - name: Deploy to Vercel - Prod
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: yarn vercel deploy --prod --prebuilt --scope blocksense --token ${{ secrets.vercel_token }} > _vercel-deployment-url

      - name: Deploy to Vercel - Preview
        if: github.ref != format('refs/heads/{0}', github.event.repository.default_branch)
        run: yarn vercel deploy --prebuilt --scope blocksense --token ${{ secrets.vercel_token }} > _vercel-deployment-url

      - name: Read deployment URL
        id: read-deployment-url
        run: |
          deploymentUrl=$(cat _vercel-deployment-url)
          echo "::set-output name=deploymentUrl::${deploymentUrl}"

      - name: Comment on the PR
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          recreate: true
          message: |
            Deployed to ${{ steps.read-deployment-url.outputs.deploymentUrl }} ðŸŒ±
