{"noir_version":"0.34.0+e0185e75e65df08b5334856f8bf63fa3aed7049a","name":"HistoricDataFeedStore","functions":[{"name":"get_latest_counter","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"key","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/7VWzU7DMAxu6Qrt6Ph9gfACUzdA4sBhMC5cOIDEvaxlTHSt1GTi9Wm0mH2zRplYailNmsbfZzt2GtdZimuaFh/muNDcyPTxbjKwiBW73E796GzhjMvGJALGt6Z/UWWVTDMh81KJWBT1M8nz8itL+wK/STFfSCWkSiol3qtyLgb9H/Ch6cO67QFxx2JkQ+aoNeybq+vQWQ+sbbv9drDjgxpjHCyxyH7i6tXNM2NaE5g9ou8PZp7WncMc7W1UtyMznmbqPi8nn0+L+VtWYWptSktMVxSNeLZCHJeFqpKJukvTKpMSEZoqlyN2AfEjmRWPKWrt/w/pNavkrCxQ62BLJB3nAN5Hpo93k2HorPbQdj71wHv047AdvkseQ8wW4uyCTbZr0wUe4icuOsd0TCJm0wnMBWBbxLAihoV6XoMetyE0drQQg+Gp4YvAX+JEn0NnPTcs8ccYQ99Z33fOSz82W9wu7EPHYAeM34c1F6an0wvFA13M45C9j+zYPvitVjGvbOZJU616ELM2a9Vj/LxOdA5T/sjl5eU5S1K8C2F4eM9ddDe46sMYj46Amcb1muQYcDF8PsOkdzxOME1J768jDdOc1mCZc5tobW8DH14z6JvG+gbzcwGNiQsAAA==","debug_symbols":"7Zpha8IwEIb/Sz77IXe5XC7+lTFG3XQUSh3qBkP876vOxI4GMugY1PSLWn2Nzz0tMTl6VC/r1fvrU91utnu1fDiqZvtcHept2x0dTwu12tVNU78+9d9W+vzgL/H9W9Wej/aHandQS71Q6/ale+6+uqmbtVq67uUg5sRfg6JdjIKWRNaivWatvQ0LTk6PCwV6BIVQCApjhoJMICaWAQWMoRB3DXoNGQrWwQUjDyhwBIWPlr2RHIWEQZ0enhGTojDOhPGNs5RhgWiE+1eHTWTBBhbwN24DKW5vxcSB6XbGEUwyTWFkrXthf6mSiqjSFlElF1GlK6JKKaJKX0KVqIuoEoqoEouosoi1D1IRVRax9sEi1j44fu0DmjD+gPeZOn+56WLmsJ0T0xvSXKBlitB+gtBGTxEapgiNU4TO/6tzDtpCmMvA/uivpOYyBAzNJoR+zyvZjYGubRQnVfbZ3o2E3g31uk2c4iAOA5Pgj+zZChVqxUi4/qyWgRU7W0lY4dlKwoqbrSSsyGwlYcXPVoZWSM9WElbgnqw4E63gKCs4W0lYuau17Z9ZoX+3AhStsM1aIRut9PZL2G2BzvR20vQ8XfpTd/hR7epq1ayv909s3tvn3u0Uh8+370+68Bc=","brillig_names":["get_latest_counter"]},{"name":"set_feeds","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"calldata_length","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"keys","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"input_values","type":{"kind":"array","length":48,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["set_feeds"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"calldata_length","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/9VWzU7DMAx2Wdqm6yomeAB6BA7QSUPacRK/D8ALTKMSu2xoLTw/S2dr39KyC4m0RaqcOLH95bOTNKBt05sv4H7IMqJ2kzVTlsX/2sihr8InzuBEcJ6dCM7eieBUDnEGHTiNVNw3586cuZi257E1icYm0T2YpwOOAiuoaXfQv2b5/rmo8vlqWa9n8zr/WJVVvlzV+XdV5l/rxc+sLs24rFosJwwIQU/dsDZKrI078z0ZzxPG7gH3g/Hb9+O7MIl91DvuCWKZonjlOZEBfxnPE9hntCucJ9BJwT2DTl6EF9DFtB/L4NF+8jXxmK8iAw4JYmDDwyb13idveW5endSK37fiNzllwjXoFA9S0IVWzZjhFcxr2JPM31p7Qyw9C4vxG/rggnMf+fBdFGPkUHVwGHZwGHVweLn53iw/BnesveBuXhQNGBXEEpxnsEYDjhDGN7TTJ1IE7E94Eb/nZu9SR/pvO2XZDWFNBHaxZRcD7mbt5su5nzKfeAc4/DMb2Xe2y78+PMuKfUss2U8Ia+5ZXlC7IQdEfu/ABDC5fiMP3a8S8xju14GFaQg6rMWB5Wtg+ToGu4z2uRWd3OUpyF9gHhYxHg4AAA==","debug_symbols":"lZDLCsQgDEX/JWsXpXUq+CvDULTVEhAtagcG8d8nfSy6dRNykns2t8Bi9L5O6G1IIN8FXJhVxuCJSmWgIzqH6/Q8Q3cM3p/5tCl/YMoqZpDDKBgYv9AmevItOgNSdPXDgA/NBm82Xs3G2GZUoq+KqLQzd0l29/Ojs/zbrg+F/w==","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"get_data_feed","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"key","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"HistoricDataFeedStore::Transmission","fields":[{"name":"value","type":{"kind":"array","length":24,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"timestamp","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/8VZPXPcRBjWnU46SXeSdYZAPEOhDqqMFMKMPUPhEBoaChhS0SiRnBjsU0YnE+hp+AEUUEENM9BCwS+AgmGGliG/JLt3+94993pPOdtaZ2fWu1rv+7HP+7Ef17MWZU/Unuo7qqVvLDR2qNr0aiXrkFfaBx1vQl+O26IO1NpcUYeieqL6ogaijkQdixqKGom6I2os6kTUXVFfEfVVUW+I+pqor4OMPRI0YCBh2bsmhfYUP67Hm9B/V7UfN1WdPyqT2UnVJGkyFX/zk5PqaVncSvB/s+T0bNYksyavm+Sork6T7Bby3jfI+xODvL+zztvnbl3nXyXH06L8MqnOmqQ6Sh5UZ9NihoQ/XJbwJ+i/odq8acrTJ03SVEleFMnT4+ZxUn1R1kdiRUsTPlOtdA/0c+lCh+o7vVrJfFCuU9777xS+tR4eXevtmOGdyrC85y14kf4kS4amrfo0RzYx6OKsIJ3T0/w+2NM1gvmdO5L30ATvNNufr907j8dAjbkw5qgx0kV+/gL//5ThK1Pb+2qMokumwkj1H5XNeyfVw88/PDt9UNYYXrqdCxMzFslxd8XxXjVt6vxhc7co6nK2FrS6dGpt4BgAx8f58fSDAqmGl+N0v6xnx9UUqbwtOfmqUjlUbXq1koWgIcoagV4dxuHbfJ1oUZIZgE5d55geyCH5JItiWWIyZjrFMOaDbmPGa8x4IZ0N9IbwTXtK/7b1SfmRGfm3J0oe6RAxHBFD9LuO5Kco0wF5AcgNYe29jrHfAdx7oEsIOtGct1RL2QsL2qhDfG6HIB9l4V53XfFOMgPQyUS8x0w+ycJ4nzCdYhjDWJkwXhPGC+nsFjqug7TBrhkMljFJOpAczG1USC/HWrcP6WXDGtDf0b9pzgGTh8Vmsizg47C5vrWOZZfYtPmnDes3dC7NEFOST7LIN2QOI1vNFteij8p8eSDpMXh4y5fY0yzVhb7OHWTxNXRthW66siB8PBzpG0PIgT7R+YyOw6SDkmhGGp1o7iaXw23+ulIiyTTtci/CEq9ENDeGsTHoxjHnVyOki1vouA7XkRJJB54SER8HWrQP6RXAGvCqiCmR5txn8rBs8sPQDAatfhjCOk36IT+qXiL1hYykLfX1NUvF1Idmx9QXaejayg7wRfhQ1gC+dakPb94u499mOgzhiM3zLVMnreygTSeSGVjGbh4ZnkZIfsQw4Wm935381FyoZvu6UAkZtniTRxvjFoy3QYwbPPUSHZ4An8D/8SZFcwOmG79xSv/9DHiQP6MvbLO9c/vqtvcI+qSnka08S9NNtylDfnCwbco2eZvifshvMnJrvQF2kEoQzU0EycwTz/qTZgjg0JMmyZWfv6v+jrVyEgSPO6XPFhtb6462lKX65JjS4b+GeWaS4HqioIAnXSLj8tPMAfnfwtq/AWxDGKcx3OxIr202S85L9ySnSyT8CXDMMEKdRqAbf87BMxuuwWb80Ccc4KvDw9zz4MI/AtAD/WME4zTne9Xqzqu6xM+TQdtzK8mVNPy51TQG/hYY0JwfWzDQ5Zr5T2SeEd0PJNu/QPbSliCP5yy+Getswu/2sXX+yVaX/Hluwfhz2RzMSzTnZ9XqsMWDAh5aOD+eW4dGsF8873rwU9kAZBH+fZjjgR4OfP9mrcZ9+v1H8SNfIr7zPKT6vreZbsDoYpjjAt2Q0Q1B7/lcUX9V/ZHC0zWD5/zpjXCz2TpciCnCjf7nMyy6tnHAbOxrbExzAmZj+v7TWo17TFePYT6Pxw1+4Gv8YOS9mM4DuuEF6HzwnxHzqW3kIZ3b4q++xu/+UP0RW6+t8V/KKy7j48Ccv4H3P6qPP2Pb8BP3/5r/U2k7dL9snxxcwCf/g/Vs42/eFn7jtPiNd0H7/6v6gbW+n3V5PkVbSz97DmUZGgk3JwAA","debug_symbols":"7Z3dTuMwEIXfJddceOyZ8ZhXWa1Q+VWlqiB+Vloh3n3T0qSpYsW7Ktt6mNwAhUn4zmmdObaj9r25vbt+e7haru8fX5rLH+/N6vFm8bp8XLeP3j8umuvn5Wq1fLga/rpxmy/A2/qXp8V68/DldfH82ly6i+Zufdt+b4+9X67umsvY/jgqi5J2heJiXwpOMrXkaVdLtD8tRPn4edFAPIJCsCsU9gUKDB0xsowo5BgKibvC5KBAwa7zgj2PKNIRFKl3OQUpUUh30uhGz4h3OYpAEXfHBHZYYIHeER6+OihTC9SxQNpzB8hxJ5LQnxj3z7iHkK3uiMG5QXHaqgQTKr0JlcGESjShkkyoZBMqowmVYkJlsqAymMg+wUT2CSayTzCRfQIerRIc+v4fpFTQ+ZeTLopdIcmhdRto0gjNGqGjRmjRCJ0UQmO+qzOEHjp49ddIBBMqvQmVwYRKNKGSTKhkEyqjCZViQmWyoJJMZB8ykX3IRPah47PPf5liMPOukCUMThm20KgRmjRCs0bocm7AEjT1xUAHO/y5EebBd7c7eBjedZG9HwCSg36ocypUs8iuOOLgfgfOcSB3J0bxB7UbV8SoK0G61x85GbmSZlfGrrCbXcm4ArMrGVf87ErGlTC7knEFv5MrMfSu+KNcodmVjCs8u5Jx5fTZFrB3hanoClLvCu33pvzn3hCLavqkmT6W77YB/esZEUyo9CZUBhMq0YRKMqGSTaiMJlSKCZXJgkoxkX3ERPaR47PP6bckJGiERo3QpBG6nBvIqVnr+KrVQomzKxlXZHYl40qaXRm7ktzsSsYVmF3JuOK/kytftd6ewuxKxhWcXcm4Qid35Z/2B7z0rng5yMAbeNYMHzXDi2b4pBi+XV1QTQ+q6b1q+qCaHlXTa+6z4DQ3WnCaO217jGp61b0WVPdaUN1rQXWvhcp7bejnphBCHNFX3msL9JX32gJ95b12SI9pGiQk7IpDGpx6886mo2Jshe2KMQz2m9rirS+Vd/Gz+VJ5PjibL5Unj3P54ivPNGfzpfK0dDZfKs9hZ/NFUcI7qS84+5L1RVEqPakvc97N+6I2727p1abSLb3a7LihD7V37Bh7+jimr72vTtPXPmpTd+sNoOMRfe2jdpq+9lE7SY+1z8um6SufPWHknl5wRF/5FbNAX/kVs0Bf+6idvN5T5aMWXZ8U0I92Kaj2UTtNX/uonaavfdRO06Nq+srn4gX6ymfMBXrVCZlUJ2RSnZBZdULm2vcXpulrX1OYpq99TWGavvJeW6Cvfd17mr721elpetW9llX3Wlbda6PqXhtV99qot9d+tI9+LZ6Xi+vV3e7zxe/f1jeDjxt//f30+Ze2+A8=","brillig_names":["get_data_feed"]},{"name":"get_feed_at_counter","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"key","type":{"kind":"field"},"visibility":"private"},{"name":"counter","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"HistoricDataFeedStore::Transmission","fields":[{"name":"value","type":{"kind":"array","length":24,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"timestamp","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/8VZvY8bRRQfe793zx8XCISIYktoIvsgkk+iuBAoaEACQUexifcSizsvWu8RoIAKapCghSJ/QVJEkdJGyb+VmfW888/vxhtfbicZaW5mx+/z996bndnriGW7KntHzz09dsXZRjQHehxdrI1blDWyaWenRTu7YOMVwNqR3dX4+7IHsoeyR7LHsiey78jek70v+0D2oey7sl+S/S3Z35b9suzvyP6ulv8exLhW6oJSDpgABttGXRWrZEP9H8D8Ez1+UxVldidPF0dFlY7SufybHR0V9/LptRR/W6THJ4sqXVRZWaWHZXGcjq+h7IlF2b8ZMLxRltkv6Ww+zX9Oi5MqLQ7TW8XJfLpAxj9elfEvmL+vx6yq8uMfq7Qq0mw6Te/Nqrtp8VNeHkqPTmF+rkcVRsxHFeoD/Ty6WBtHYFyrsifXcyXbs2P3npLt25E9UuVzM1zKIvtJlyohR8+JpidW5fqZXlPDLthHcoSmJRldiLEVfyYfX1eyAxuyR+NJjQfDqsYjPIubp9fIFvX4D/z+fbjCRzW1LX2u16ji1DbW1/M7efXpUXH7hy9Pjm/lJZYcIimY57wpiZdWEm8W86rMblc3ptMyX6wVcmCQKjZIjEHi3Ww2/2KKXOGrSfouLxezYo5c0ZaSIpDUdr0o2QnoaknuuKcR4H707PjxEccQs4V0xmBT23txB/SQftLVBTv6zKYhrCVgW5/J6jNZyOc08HEbVAwGdjDY29UYkw2kJ2Y+W8q5+nxK/nqgLwG9iFWbZ84O+Otq2TssPh7QfKhH2r2wbaodS3FrrB2Moc3aGTD9TbVDtFgDuK+cp3bcBj5T7QztYHCmdkhPzHwWYj3HaR33jgR82JSHRLOvR1MeOsDjw3rEng9EOxhsynv07XXlPem0nfcJ089zbgdoFsur0td5dnogQRF4zaCRu9g1uBrAHNPMgblv4GtqA7GShfDxMh8wu4ZAT7/1GB/JEkyWYLL4dq/WD/Tz6IJN2eQzGywe1feb/CWdsbB2rapTNWD6fQPedkp1PDGVSsL8x6scxoFeDZ7+nWiwbnogg/jwCPGtHofA7zBf0Tb+BUhh9RXIGMA6yfCZDL4VNMUAXxNkF9Fau56Ol3WANpE+S3mwv+2WbacOzVs26aI4qVf5ZYiDMoJ4riBIrh2Q1u71pBjv9aRXPf6v56bE6Yj1l4Dp28cQ6B3QRd8TKDFVAs7A974l300FT7b0resfjXHT+BV8n4sVzj2Y04gvO7Jrm5cll7XNmULRxIwmYRihTXh/24E5jfxcjt/ZkN5lOhJhxsPe945lftB3F54fMawTze96NJ2PUZYQ5s3AhDXqJ79x83odGIRbYEA0fzZggHsN3u9pr2n7BaDEPgTdp1iCvhDsQ7ybYoJ4qDYEGtPdivj43oL7j89oEtBBNH/r0YQtHhTIh55BHt9bAyvYL79xhPC92AVdhH8XaEKww4Pn/8RqPYJg1e8X+s6sR+W/r+dRuJnPZXxDoPGBL2B8Adhd08r+r54nGk/fDp57NS5atsP88KGmCDf6LWJYtB3jmMU4MsSYaGIWY3p+IFbrIbM1ZJjXdbUhDyJDHiThy/lC4AvOwRdB/iQsp7bRh3x+Q75Ghry7r+cJ89cx5C9dMnwmxwOaRyD7sZ7j/3Ic+D/PM8Pv1JoO3W86J91z5ORT8GebfAu3yBuvIW/Cc8b/iZ7HYv191ub5FGOt8uwFbDXBhKAiAAA=","debug_symbols":"7Z3RTuMwEEX/Jc882J6xPeZXVitUoKBKVUFQVloh/n3TbmxSYtmVutvO4LwAoVP3zG2de52k7Xt3v7x9e7xZbR6eXrvrH+/d+ulusV09bfqt94+r7vZltV6vHm/G/+7U7of2+/rX58Vmt/m6Xbxsu2t11S039/3v/r4Pq/Wyu/b9n5MyT2EoJOVTqVaUqbXGDrXWfg6rPX38vOo0nUBBGAvJmQoFQiRGRxOKcAoF+aEwKF2hcCpq4Yz7SmHUCRQhqRyAahQUB/Vq8owYnaMA8jDcB4KCCotOirjxq8NmarWNLDp8coPOcQdLkAbGz2fcaMhWYxxZqVFx2HdpmugSmugSm+jSNtGla6JL30SX1ESXoYUuQTXRZRPZB5rIPtBE9gFsosvTs49WaNIDhFDp88hFl/Wx0NKhdDtoJxHaS4QmidBBIDQqidB1V9da/D4STRNdQhNdYhNd2ia6dE106ZvokproMrTQpVVNdNlE9rFNZB97evb5L+HbOTcUOoLRkLCHRonQViK0kwhdzw3GVqCtjsXaHpz7zs0wo028EMDo8fUI2TPluj+ln6a6C5VqRzQUexxdCeByHOjiwEjmoHanCjWqClB8/VlFE1XCrMpUFadmVTKq6FmVjCpmViWjCsyqZFTBWZWMKvY7qZKoPZqTVHGzKhlVvlW2/WeqnD/bakyqOFtTxVBSxYySeQ+ygw+C4b2SDK8lwxvJ8CAZHiXDW8nwTjK8lwwv2WG9ZIclyQ5Lkh2WJDssSXZYkuywJNlhibnDQlqNagD/FZ65w5bhmTtsGZ65w47hMZRBIGBI1KOhd2+unRQjuPgeWYTRqci+uJclMPfuS8nCPBVcShbmeeNSsjBPMpeSBWdZcrIwT1+XkkVQrjunLIIS4zllEZRFzynLnHJzsmglNubu6cWm0T292NC4p+fu1t4nej+l526qRXrNfdaGeH2NRuUm9NxnbZme+6wt03NfkZXpkTc9epfoCSf0zPeYFXrme8wyveE+a4v7e8N81qJKSQGNmdBzn7Vleu6ztkzPfdaW6Zmv8Sv0zJfiFXrmK+YyPYhOyCA6IYPohAyiE/IRHwDGmZ77MYUyPfdjCmV67sfTy/TcD3uX6bkfnS7So2ivRdFei6K9FkV77REfy8WZXq7XfvRbvxYvq8Xtejl8scXD2+Zu9D0X29/Pf2/pi/8A","brillig_names":["get_feed_at_counter"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"HistoricDataFeedStore::constructor_abi","fields":[]},{"kind":"struct","path":"HistoricDataFeedStore::set_feeds_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"HistoricDataFeedStore::set_feeds_parameters","fields":[{"name":"keys","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"input_values","type":{"kind":"array","length":48,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"historic_data_feeds","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"counters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}}]}]}},"file_map":{"26":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"29":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\ntrait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n","path":"std/hash/mod.nr"},"34":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"58":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"70":{"source":"contract HistoricDataFeedStore {\n    use dep::aztec::prelude::{AztecAddress, PublicImmutable, Map, PublicMutable};\n    use dep::aztec::protocol_types::traits::{Serialize, Deserialize};\n\n    // Transmission's value which is 24 bytes.\n    global TRANSMISSION_VALUE_BYTES_LEN = 24;\n    global MAX_FEEDS_NUMBER: u16 = 2;\n    global MAX_FEEDS_BYTES_LEN = MAX_FEEDS_NUMBER * TRANSMISSION_VALUE_BYTES_LEN;\n\n    struct Transmission {\n        // 24 bytes\n        value: [u8; TRANSMISSION_VALUE_BYTES_LEN],\n        // 64-bit number\n        timestamp: Field\n    }\n\n    impl Serialize<MAX_FEEDS_NUMBER> for Transmission {\n        fn serialize(self) -> [Field; MAX_FEEDS_NUMBER] {\n            let mut output = [0 as Field; MAX_FEEDS_NUMBER];\n            let mut bytes_value: Field = 0;\n            let mut mul: Field = 1;\n\n            for i in 0..24 {\n                let temp: Field = self.value[23 - i] as Field;\n                bytes_value = bytes_value + (temp * mul);\n                mul *= 256;\n            }\n\n            output[0] = bytes_value;\n            output[1] = self.timestamp;\n\n            output\n        }\n    }\n\n    impl Deserialize<MAX_FEEDS_NUMBER> for Transmission {\n        fn deserialize(input: [Field; MAX_FEEDS_NUMBER]) -> Self {\n            let mut value: [u8; 24] = [0; 24];\n\n            let part_value: [u8; 24] = input[0].to_be_bytes();\n            for i in 0..24 {\n                value[i] = part_value[i];\n            }\n\n            Self { value, timestamp: input[1] }\n        }\n    }\n\n    #[aztec(storage)]\n    struct Storage {\n        historic_data_feeds: Map<Field, Map<Field, PublicMutable<Transmission>>>,\n        counters: Map<Field, PublicMutable<Field>>,\n        owner: PublicImmutable<AztecAddress>,\n    }\n\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor() {\n        storage.owner.initialize(context.msg_sender());\n    }\n\n    /**\n     * Sets a historical data feed\n     * \n     * Represent all values as one monolith array.\n     * Using sentinel value like 0 for indexing the end\n     * of the bytes in the input values.\n     *\n     * @note Using `current_transmission_value` as a portion\n     * of the whole `input_values` array.\n     *\n     * @param keys The keys of each data feed, capped at MAX_FEEDS_NUMBER\n     * @param input_values The values of the data feed, 24 bytes each, thus 24 * MAX_FEEDS_NUMBER bytes\n     */\n    #[aztec(public)]\n    fn set_feeds(\n        keys: [Field; MAX_FEEDS_NUMBER],\n        input_values: [u8; MAX_FEEDS_BYTES_LEN],\n        length: u64\n    ) {\n        assert(storage.owner.read().eq(context.msg_sender()), \"You are not the owner!\");\n\n        for i in 0..length {\n            let mut counter = storage.counters.at(keys[i]).read() as u16;\n            counter = (counter + 1) % MAX_FEEDS_NUMBER;\n            if counter == 0 {\n                counter = 1;\n            }\n            let mut helper_index = 0;\n            let mut current_transmission_value = [0 as u8; TRANSMISSION_VALUE_BYTES_LEN];\n            for j in i * TRANSMISSION_VALUE_BYTES_LEN as u64..(i + 1) * TRANSMISSION_VALUE_BYTES_LEN as u64 {\n                current_transmission_value[helper_index] = input_values[j];\n                helper_index += 1;\n            }\n            storage.historic_data_feeds.at(keys[i]).at(counter as Field).write(\n                Transmission { value: current_transmission_value, timestamp: context.timestamp() as Field }\n            );\n            storage.counters.at(keys[i]).write(counter as Field);\n        }\n    }\n\n    unconstrained fn get_data_feed(key: Field) -> pub Transmission {\n        storage.historic_data_feeds.at(key).at(storage.counters.at(key).read()).read()\n    }\n\n    unconstrained fn get_latest_counter(key: Field) -> pub Field {\n        storage.counters.at(key).read()\n    }\n\n    unconstrained fn get_feed_at_counter(key: Field, counter: Field) -> pub Transmission {\n        storage.historic_data_feeds.at(key).at(counter).read()\n    }\n}\n","path":"/home/anon/blocksense/libs/aztec_contracts/contracts/historic_data_feed_store/src/main.nr"},"98":{"source":"use crate::{context::{PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like SharedImmutable but without the ability to read from private functions.\n// docs:start:public_immutable_struct\nstruct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T, Context> Storage<T> for PublicImmutable<T, Context> {}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl <T, T_SERIALIZED_LEN> PublicImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicImmutable<T, UnconstrainedContext>where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"103":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"105":{"source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"108":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\nstruct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"110":{"source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\nuse crate::hash::ArgsHasher;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    args_hash: Option<Field>\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs, args_hash: Option::none() }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            let mut hasher = ArgsHasher::new();\n\n            // TODO: this should be replaced with the compile-time calldata size.\n            for i in 0..self.inputs.calldata_length as u32 {\n                let argn: [Field; 1] = calldata_copy((2 + i) as u32, 1);\n                hasher.add(argn[0]);\n            }\n\n            self.args_hash = Option::some(hasher.hash());\n        }\n\n        self.args_hash.unwrap()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\nstruct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"121":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::oracle::logs_traits::ToBytesForUnencryptedLog;\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/hash.nr"},"163":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"176":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"178":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"180":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/initializer.nr"},"187":{"source":"struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"205":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"213":{"source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"214":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"216":{"source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"274":{"source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"305":{"source":"use crate::{\n    crate::address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"318":{"source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/anon/nargo/github.com/AztecProtocol/aztec-packagesaztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"}}}